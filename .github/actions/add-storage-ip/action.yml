# .github/actions/add-storage-ip/action.yml
name: 'Add IP to Azure Storage Whitelist'
description: 'Add current runner IP address to Azure Storage account firewall rules'
inputs:
  environment:
    description: 'Deployment environment (dev, qa, prod, sbx, etc)'
    required: true
  storage-account-name:
    description: 'Name of the Azure Storage account'
    required: true
  resource-group-name:
    description: 'Name of the resource group containing the storage account'
    required: true
  subscription-id:
    description: 'Azure subscription ID'
    required: true
  operation-timeout:
    description: 'Timeout for the IP adding operation in seconds'
    required: false
    default: '120'
  specific-ip:
    description: 'Use a specific IP address instead of detecting runner IP'
    required: false
    default: ''

outputs:
  ip-address:
    description: 'IP address that was added to the whitelist'
    value: ${{ steps.get-ip.outputs.ip }}
  
runs:
  using: "composite"
  steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: >-
          ${{
            (inputs.environment == 'prod' || inputs.environment == 'qa') && secrets.AZURE_PROD_CICD ||
            (inputs.environment == 'sbx') && secrets.AZURE_SBX_CICD ||
            secrets.AZURE_NONPROD_CICD
          }}
    
    - name: Get IP Address
      id: get-ip
      shell: bash
      run: |
        if [[ -n "${{ inputs.specific-ip }}" ]]; then
          # Use provided IP address
          IP_ADDRESS="${{ inputs.specific-ip }}"
          echo "Using provided IP address: $IP_ADDRESS"
        else
          # Get current runner IP address
          IP_ADDRESS=$(curl -s https://api.ipify.org)
          echo "Detected runner IP address: $IP_ADDRESS"
        fi
        
        echo "ip=$IP_ADDRESS" >> $GITHUB_OUTPUT
        echo "::notice::IP address to be added: $IP_ADDRESS"
    
    - name: Validate Service Principal Access
      shell: bash
      run: |
        echo "::group::Validating Service Principal permissions"
        CLIENT_ID=$(echo '${{ inputs.azure-credentials }}' | jq -r '.clientId')
        
        echo "Checking role assignments for service principal..."
        az role assignment list --assignee "$CLIENT_ID" \
          --scope "/subscriptions/${{ inputs.subscription-id }}/resourceGroups/${{ inputs.resource-group-name }}/providers/Microsoft.Storage/storageAccounts/${{ inputs.storage-account-name }}" \
          --query "[].roleDefinitionName" -o tsv
        
        if [[ $? -ne 0 ]]; then
          echo "::error::Failed to validate service principal permissions"
          exit 1
        fi
        echo "::endgroup::"
    
    - name: Add IP to Storage Account Firewall
      id: add-ip
      shell: bash
      run: |
        echo "::group::Adding IP to Storage Account Firewall"
        echo "Adding IP address ${{ steps.get-ip.outputs.ip }} to storage account firewall..."
        
        # Add the IP address to the storage account firewall
        timeout ${{ inputs.operation-timeout }} az storage account network-rule add \
          --resource-group ${{ inputs.resource-group-name }} \
          --account-name ${{ inputs.storage-account-name }} \
          --ip-address ${{ steps.get-ip.outputs.ip }}
        
        if [[ $? -eq 0 ]]; then
          echo "Successfully added IP address to storage account firewall"
          echo "::notice::Successfully added IP ${{ steps.get-ip.outputs.ip }} to storage account firewall"
        else
          echo "::error::Failed to add IP address to storage account firewall"
          exit 1
        fi
        echo "::endgroup::"