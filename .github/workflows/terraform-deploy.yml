name: 'Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
          - qa
          - sbx
      module_branch:
        description: 'Branch to fetch from terraform-cloud-modules-iac'
        required: false
        default: 'develop'
        type: string

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    env:
      TF_WORKING_DIR: ./azure/scripts
      CREDS: >-
        ${{
          (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'qa') && secrets.AZURE_PROD_CICD ||
          github.event.inputs.environment == 'sbx' && secrets.AZURE_SBX_CICD ||
          secrets.AZURE_NONPROD_CICD
        }}

    steps:
      - name: Process credentials
        id: process-creds
        run: |
          # Process the CREDS JSON and mask values
          CLIENT_ID=$(echo '${{ env.CREDS }}' | jq -r '.clientId')
          CLIENT_SECRET=$(echo '${{ env.CREDS }}' | jq -r '.clientSecret')
          TENANT_ID=$(echo '${{ env.CREDS }}' | jq -r '.tenantId')
          SUBSCRIPTION_ID=$(echo '${{ env.CREDS }}' | jq -r '.subscriptionId')
          
          # Add masks for each value
          echo "::add-mask::$CLIENT_ID"
          echo "::add-mask::$CLIENT_SECRET"
          echo "::add-mask::$TENANT_ID"
          echo "::add-mask::$SUBSCRIPTION_ID"
          
          # Save to outputs
          echo "client_id=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "client_secret=$CLIENT_SECRET" >> $GITHUB_OUTPUT
          echo "tenant_id=$TENANT_ID" >> $GITHUB_OUTPUT
          echo "subscription_id=$SUBSCRIPTION_ID" >> $GITHUB_OUTPUT

      - name: Export ARM credentials
        run: |
          echo "ARM_CLIENT_ID=${{ steps.process-creds.outputs.client_id }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ steps.process-creds.outputs.client_secret }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ steps.process-creds.outputs.tenant_id }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ steps.process-creds.outputs.subscription_id }}" >> $GITHUB_ENV

      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Checkout terraform-cloud-modules-iac
        uses: actions/checkout@v4
        with:
          repository: joselrnz/terraform-cloud-modules-iac
          ref: ${{ github.event.inputs.module_branch }}
          token: ${{ secrets.API_TOKEN_TF }}
          path: terraform-cloud-modules-iac

      - name: Copy modules to correct location
        run: |
          mkdir -p modules
          if [ -d "terraform-cloud-modules-iac/azure" ]; then
            cp -r terraform-cloud-modules-iac/azure/* modules/
            echo "Azure modules copied to modules/"
          else
            echo "Azure modules directory not found in terraform-cloud-modules-iac"
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ env.CREDS }} }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=data-dp203" \
            -backend-config="storage_account_name=terraformstateclouddev" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ github.event.inputs.environment }}/terraform.tfstate"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Confirm tfvars file exists and inspect structure
        run: |
          echo "Looking for tfvars file: ../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars"
          find ../.. -type f
          test -f ../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars || {
            echo "ERROR: tfvars file not found!" >&2
            exit 1
          }
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars" \
            -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        run: |
          terraform apply \
            -var-file="../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}