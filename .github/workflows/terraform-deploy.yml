name: 'Terraform Deploy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      module_branch:
        description: 'Branch to fetch from terraform-cloud-modules-iac'
        required: false
        default: 'develop'
        type: string

permissions:
  contents: read
  pull-requests: write
  packages: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Checkout terraform-cloud-modules-iac
        uses: actions/checkout@v4
        with:
          repository: joselrnz/terraform-cloud-modules-iac
          ref: ${{ github.event.inputs.module_branch }}
          token: ${{ secrets.API_TOKEN_TF }}
          path: terraform-cloud-modules-iac

      - name: Copy modules to correct location
        run: |
          mkdir -p modules
          if [ -d "terraform-cloud-modules-iac/azure" ]; then
            cp -r terraform-cloud-modules-iac/azure/* modules/
            echo "Azure modules copied to modules/"
          else
            echo "Azure modules directory not found in terraform-cloud-modules-iac"
            exit 1
          fi

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_NONPROD_CICD }}
          enable-AzPSSession: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: ./azure/scripts

      - name: Terraform Init
        run: terraform init
        working-directory: ./azure/scripts
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).subscriptionId }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./azure/scripts
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).subscriptionId }}

      - name: Confirm tfvars file exists and inspect structure
        run: |
          echo "Looking for tfvars file: ../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars"
          find ../.. -type f
          test -f ../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars || {
            echo "ERROR: tfvars file not found!" >&2
            exit 1
          }
        working-directory: ./azure/scripts

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars" -no-color
        working-directory: ./azure/scripts
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).subscriptionId }}

      - name: Terraform Apply
        run: terraform apply -var-file="../../azure/env/${{ github.event.inputs.environment }}/${{ github.event.inputs.environment }}.tfvars" -auto-approve
        working-directory: ./azure/scripts
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_NONPROD_CICD).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_NONPROD_CICD).subscriptionId }}
